name: 🔧 Auto Gradle Version Manager

on:
  workflow_dispatch:
    inputs:
      gradle_version:
        description: 'Gradle version to use (leave empty for auto-detection)'
        required: false
        default: ''
  push:
    branches: [ main ]
    paths:
      - 'android/build.gradle'
      - 'android/app/build.gradle'

jobs:
  auto-gradle-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🔍 Analyze project and detect required Gradle version
      id: detect-gradle
      run: |
        echo "🔍 Analyzing Android project..."
        
        # Extract Android Gradle Plugin version from build.gradle
        AGP_VERSION=""
        if [ -f "android/build.gradle" ]; then
          AGP_VERSION=$(grep -E "com\.android\.tools\.build:gradle:" android/build.gradle | sed -E "s/.*:([0-9]+\.[0-9]+\.[0-9]+).*/\1/")
        fi
        
        # Map AGP version to required Gradle version
        REQUIRED_GRADLE=""
        case "$AGP_VERSION" in
          8.1.*) REQUIRED_GRADLE="8.1.1" ;;
          8.0.*) REQUIRED_GRADLE="8.0" ;;
          7.4.*) REQUIRED_GRADLE="7.6" ;;
          7.3.*) REQUIRED_GRADLE="7.4" ;;
          *) REQUIRED_GRADLE="8.1.1" ;; # Default to stable version
        esac
        
        # Use manual input if provided
        if [ -n "${{ github.event.inputs.gradle_version }}" ]; then
          REQUIRED_GRADLE="${{ github.event.inputs.gradle_version }}"
        fi
        
        # Get current Gradle version
        CURRENT_GRADLE=""
        if [ -f "android/gradle/wrapper/gradle-wrapper.properties" ]; then
          CURRENT_GRADLE=$(grep "distributionUrl" android/gradle/wrapper/gradle-wrapper.properties | sed -E "s/.*gradle-([0-9]+\.[0-9]+(\.[0-9]+)?).*/\1/")
        fi
        
        echo "📊 Analysis Results:"
        echo "├── AGP Version: $AGP_VERSION"
        echo "├── Current Gradle: $CURRENT_GRADLE"
        echo "└── Required Gradle: $REQUIRED_GRADLE"
        
        # Set outputs
        echo "agp_version=$AGP_VERSION" >> $GITHUB_OUTPUT
        echo "current_gradle=$CURRENT_GRADLE" >> $GITHUB_OUTPUT
        echo "required_gradle=$REQUIRED_GRADLE" >> $GITHUB_OUTPUT
        echo "needs_update=$([ "$CURRENT_GRADLE" != "$REQUIRED_GRADLE" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
    
    - name: 📦 Download and update Gradle wrapper
      if: steps.detect-gradle.outputs.needs_update == 'true'
      run: |
        GRADLE_VERSION="${{ steps.detect-gradle.outputs.required_gradle }}"
        echo "🚀 Updating Gradle to version: $GRADLE_VERSION"
        
        # Create temp directory
        mkdir -p temp_gradle
        cd temp_gradle
        
        # Download Gradle wrapper JAR
        echo "📥 Downloading gradle-wrapper.jar..."
        curl -L "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-wrapper.jar" \
             -o gradle-wrapper.jar
        
        # Download Gradle distribution for gradlew scripts
        echo "📥 Downloading Gradle distribution..."
        curl -L "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip" \
             -o gradle-dist.zip
        
        # Extract gradlew files
        echo "📂 Extracting gradlew scripts..."
        unzip -q gradle-dist.zip
        
        # Update gradle-wrapper.properties
        echo "✏️ Updating gradle-wrapper.properties..."
        cat > ../android/gradle/wrapper/gradle-wrapper.properties << EOF
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\\://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip
        networkTimeout=10000
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
        # Replace wrapper files
        echo "🔄 Replacing wrapper files..."
        cp gradle-wrapper.jar ../android/gradle/wrapper/gradle-wrapper.jar
        cp gradle-${GRADLE_VERSION}/gradlew ../android/gradlew
        cp gradle-${GRADLE_VERSION}/gradlew.bat ../android/gradlew.bat
        
        # Make gradlew executable
        chmod +x ../android/gradlew
        
        # Cleanup
        cd ..
        rm -rf temp_gradle
        
        echo "✅ Gradle wrapper updated successfully!"
    
    - name: 🧪 Test Gradle wrapper
      if: steps.detect-gradle.outputs.needs_update == 'true'
      run: |
        echo "🧪 Testing updated Gradle wrapper..."
        cd android
        ./gradlew --version
        echo "✅ Gradle wrapper is working correctly!"
    
    - name: 💾 Commit changes
      if: steps.detect-gradle.outputs.needs_update == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add android/gradle/wrapper/
        git add android/gradlew*
        
        git commit -m "🔧 Auto-update Gradle to v${{ steps.detect-gradle.outputs.required_gradle }}

        📊 Update Details:
        ├── AGP Version: ${{ steps.detect-gradle.outputs.agp_version }}
        ├── Previous Gradle: ${{ steps.detect-gradle.outputs.current_gradle }}
        └── New Gradle: ${{ steps.detect-gradle.outputs.required_gradle }}
        
        🤖 Automatically updated by GitHub Actions
        ✅ Tested and verified working"
        
        git push
        
        echo "✅ Changes committed and pushed!"
    
    - name: 📝 Create summary
      run: |
        echo "## 🔧 Gradle Version Management Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Version |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Android Gradle Plugin | ${{ steps.detect-gradle.outputs.agp_version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Current Gradle | ${{ steps.detect-gradle.outputs.current_gradle }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Required Gradle | ${{ steps.detect-gradle.outputs.required_gradle }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Update Needed | ${{ steps.detect-gradle.outputs.needs_update }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.detect-gradle.outputs.needs_update }}" = "true" ]; then
          echo "✅ **Gradle wrapper updated successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **No update needed - Gradle version is already correct**" >> $GITHUB_STEP_SUMMARY
        fi 