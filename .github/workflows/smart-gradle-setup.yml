name: 🚀 Smart Gradle Setup & Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  smart-gradle-setup:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: 🔍 Check if Gradle wrapper exists
      id: check-wrapper
      run: |
        echo "🔍 Checking for Gradle wrapper files..."
        
        WRAPPER_EXISTS="false"
        if [ -f "android/gradle/wrapper/gradle-wrapper.jar" ] && [ -f "android/gradle/wrapper/gradle-wrapper.properties" ] && [ -f "android/gradlew" ]; then
          WRAPPER_EXISTS="true"
          echo "✅ Gradle wrapper files found"
        else
          echo "❌ Gradle wrapper files missing - will create them"
        fi
        
        echo "wrapper_exists=$WRAPPER_EXISTS" >> $GITHUB_OUTPUT
    
    - name: 🔍 Detect required Gradle version from build.gradle
      id: detect-version
      run: |
        echo "🔍 Analyzing Android project to detect required versions..."
        
        # Extract Android Gradle Plugin version from build.gradle
        AGP_VERSION=""
        if [ -f "android/build.gradle" ]; then
          AGP_VERSION=$(grep -E "com\.android\.tools\.build:gradle:" android/build.gradle | head -1 | sed -E "s/.*['\"]([0-9]+\.[0-9]+\.[0-9]+)['\"].*/\1/")
        elif [ -f "android/app/build.gradle" ]; then
          # Check app-level build.gradle if root doesn't have AGP
          AGP_VERSION=$(grep -E "com\.android\.tools\.build:gradle:" android/app/build.gradle | head -1 | sed -E "s/.*['\"]([0-9]+\.[0-9]+\.[0-9]+)['\"].*/\1/")
        fi
        
        # Map AGP version to required Gradle version (official compatibility)
        REQUIRED_GRADLE=""
        case "$AGP_VERSION" in
          8.2.*) REQUIRED_GRADLE="8.2" ;;
          8.1.*) REQUIRED_GRADLE="8.1.1" ;;
          8.0.*) REQUIRED_GRADLE="8.0" ;;
          7.4.*) REQUIRED_GRADLE="7.6" ;;
          7.3.*) REQUIRED_GRADLE="7.4" ;;
          7.2.*) REQUIRED_GRADLE="7.3.3" ;;
          *) REQUIRED_GRADLE="8.1.1" ;; # Default to stable version
        esac
        
        # Get current Gradle version if wrapper exists
        CURRENT_GRADLE=""
        if [ -f "android/gradle/wrapper/gradle-wrapper.properties" ]; then
          CURRENT_GRADLE=$(grep "distributionUrl" android/gradle/wrapper/gradle-wrapper.properties | sed -E "s/.*gradle-([0-9]+\.[0-9]+(\.[0-9]+)?).*/\1/")
        fi
        
        echo "📊 Version Analysis Results:"
        echo "├── AGP Version: $AGP_VERSION"
        echo "├── Current Gradle: $CURRENT_GRADLE"
        echo "└── Required Gradle: $REQUIRED_GRADLE"
        
        # Determine if we need to setup/update wrapper
        NEEDS_SETUP="false"
        if [ "${{ steps.check-wrapper.outputs.wrapper_exists }}" = "false" ] || [ "$CURRENT_GRADLE" != "$REQUIRED_GRADLE" ]; then
          NEEDS_SETUP="true"
        fi
        
        # Set outputs
        echo "agp_version=$AGP_VERSION" >> $GITHUB_OUTPUT
        echo "current_gradle=$CURRENT_GRADLE" >> $GITHUB_OUTPUT
        echo "required_gradle=$REQUIRED_GRADLE" >> $GITHUB_OUTPUT
        echo "needs_setup=$NEEDS_SETUP" >> $GITHUB_OUTPUT
    
    - name: 📦 Setup/Update Gradle wrapper
      if: steps.detect-version.outputs.needs_setup == 'true'
      run: |
        GRADLE_VERSION="${{ steps.detect-version.outputs.required_gradle }}"
        echo "🚀 Setting up Gradle wrapper with version: $GRADLE_VERSION"
        
        # Create directories if they don't exist
        mkdir -p android/gradle/wrapper
        
        # Create temp directory for downloads
        mkdir -p temp_gradle_setup
        cd temp_gradle_setup
        
        echo "📥 Step 1/4: Downloading Gradle wrapper JAR..."
        curl -L "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-wrapper.jar" \
             -o gradle-wrapper.jar
        
        echo "📥 Step 2/4: Downloading Gradle distribution..."
        curl -L "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip" \
             -o gradle-dist.zip
        
        echo "📂 Step 3/4: Extracting Gradle scripts..."
        unzip -q gradle-dist.zip
        
        echo "✏️ Step 4/4: Creating wrapper configuration..."
        
        # Create gradle-wrapper.properties
        cat > ../android/gradle/wrapper/gradle-wrapper.properties << EOF
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\\://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip
        networkTimeout=10000
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
        # Copy wrapper files
        cp gradle-wrapper.jar ../android/gradle/wrapper/gradle-wrapper.jar
        cp gradle-${GRADLE_VERSION}/gradlew ../android/gradlew
        cp gradle-${GRADLE_VERSION}/gradlew.bat ../android/gradlew.bat
        
        # Make gradlew executable
        chmod +x ../android/gradlew
        
        # Cleanup
        cd ..
        rm -rf temp_gradle_setup
        
        echo "✅ Gradle wrapper setup completed successfully!"
    
    - name: 🧪 Test Gradle wrapper
      run: |
        echo "🧪 Testing Gradle wrapper functionality..."
        cd android
        ./gradlew --version
        echo "✅ Gradle wrapper is working correctly!"
    
    - name: 🔧 Run Gradle clean
      run: |
        echo "🧹 Cleaning previous builds..."
        cd android
        ./gradlew clean
    
    - name: 🏗️ Test build (Debug)
      run: |
        echo "🏗️ Running test build (Debug)..."
        cd android
        ./gradlew assembleDebug
        echo "✅ Debug build successful!"
    
    - name: 🚀 Build Release APK
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🚀 Building Release APK..."
        cd android
        ./gradlew assembleRelease
        echo "✅ Release build successful!"
    
    - name: 📊 Check APK size
      if: github.ref == 'refs/heads/main'
      id: check-apk-size
      run: |
        echo "📊 Checking APK size..."
        APK_PATH="android/app/build/outputs/apk/release/app-release.apk"
        if [ -f "$APK_PATH" ]; then
          APK_SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH")
          APK_SIZE_MB=$((APK_SIZE / 1024 / 1024))
          echo "📱 APK Size: ${APK_SIZE_MB}MB"
          
          if [ $APK_SIZE_MB -gt 10 ]; then
            echo "⚠️ Warning: APK size (${APK_SIZE_MB}MB) exceeds 10MB target"
          else
            echo "✅ APK size (${APK_SIZE_MB}MB) is within 10MB target"
          fi
          
          echo "apk_size_mb=$APK_SIZE_MB" >> $GITHUB_OUTPUT
        fi
    
    - name: 💾 Commit wrapper files (if created/updated)
      if: steps.detect-version.outputs.needs_setup == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add wrapper files
        git add android/gradle/wrapper/
        git add android/gradlew*
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "ℹ️ No wrapper changes to commit"
        else
          git commit -m "🤖 Auto-setup Gradle wrapper v${{ steps.detect-version.outputs.required_gradle }}

          📊 Setup Details:
          ├── AGP Version: ${{ steps.detect-version.outputs.agp_version }}
          ├── Previous Gradle: ${{ steps.detect-version.outputs.current_gradle }}
          └── New Gradle: ${{ steps.detect-version.outputs.required_gradle }}
          
          🔧 Actions Performed:
          ├── ✅ Detected required Gradle version
          ├── ✅ Downloaded wrapper files from GitHub/Gradle servers
          ├── ✅ Created/updated gradle-wrapper.properties
          ├── ✅ Added gradlew scripts
          └── ✅ Tested build functionality
          
          🤖 Automatically managed by GitHub Actions"
          
          git push
          echo "✅ Wrapper files committed and pushed!"
        fi
    
    - name: 🏷️ Create Release
      if: github.ref == 'refs/heads/main' && success()
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🚀 **Automated Release v${{ github.run_number }}**
          
          ## 📊 Build Information
          - **Gradle Version**: ${{ steps.detect-version.outputs.required_gradle }}
          - **AGP Version**: ${{ steps.detect-version.outputs.agp_version }}
          - **APK Size**: ${{ steps.check-apk-size.outputs.apk_size_mb }}MB
          
          ## 🔧 What's Included
          - ✅ Kotlin Android APK (optimized for size)
          - ✅ Gradle wrapper auto-configured
          - ✅ Build tested and verified
          
          ## 📱 Download
          Download the APK from the assets below.
        draft: false
        prerelease: false
    
    - name: 📤 Upload Release APK
      if: github.ref == 'refs/heads/main' && success()
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: android/app/build/outputs/apk/release/app-release.apk
        asset_name: SpeedDrawer-v${{ github.run_number }}.apk
        asset_content_type: application/vnd.android.package-archive
    
    - name: 📝 Create workflow summary
      if: always()
      run: |
        echo "## 🚀 Smart Gradle Setup & Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Project Analysis" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Wrapper Existed | ${{ steps.check-wrapper.outputs.wrapper_exists }} |" >> $GITHUB_STEP_SUMMARY
        echo "| AGP Version | ${{ steps.detect-version.outputs.agp_version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Current Gradle | ${{ steps.detect-version.outputs.current_gradle }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Required Gradle | ${{ steps.detect-version.outputs.required_gradle }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Setup Needed | ${{ steps.detect-version.outputs.needs_setup }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔧 Actions Performed" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.detect-version.outputs.needs_setup }}" = "true" ]; then
          echo "- ✅ **Gradle wrapper created/updated**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Downloaded from official sources**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Committed to repository**" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ℹ️ **No wrapper setup needed**" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- ✅ **Test build completed**" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "- ✅ **Release build completed**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Release created with APK**" >> $GITHUB_STEP_SUMMARY
        fi 